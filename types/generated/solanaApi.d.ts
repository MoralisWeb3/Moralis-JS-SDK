/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/account/{network}/{address}/balance": {
    /** Gets native balance owned by the given network and address */
    get: operations["balance"];
  };
  "/account/{network}/{address}/tokens": {
    /** Gets token balances owned by the given network and address */
    get: operations["getSPL"];
  };
  "/account/{network}/{address}/nft": {
    /** Gets NFTs owned by the given network and address */
    get: operations["getNFTs"];
  };
  "/account/{network}/{address}/portfolio": {
    /** Gets the portfolio of the given network and address */
    get: operations["getPortfolio"];
  };
  "/nft/{network}/{address}/metadata": {
    /** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */
    get: operations["getNFTMetadata"];
  };
  "/token/{network}/{address}/price": {
    /** Gets the token price (usd and native) for a given contract address and network */
    get: operations["getTokenPrice"];
  };
}

export interface components {
  schemas: {
    NativeBalance: {
      solana: string;
      lamports: string;
    };
    SPLTokenBalance: {
      associatedTokenAddress: string;
      mint: string;
      amount: string;
      amountRaw: string;
      decimals: number;
    };
    SPLNFT: {
      associatedTokenAddress: string;
      mint: string;
    };
    Portfolio: {
      nativeBalance: components["schemas"]["NativeBalance"];
      nfts: components["schemas"]["SPLNFT"][];
      tokens: components["schemas"]["SPLTokenBalance"][];
    };
    MetaplexNFT: {
      metadataUri: string;
      masterEdition: boolean;
      isMutable: boolean;
      primarySaleHappened: boolean;
      sellerFeeBasisPoints: number;
      updateAuthority: string;
    };
    NFTMetadata: {
      mint: string;
      standard: string;
      name: string;
      symbol: string;
      metaplex: components["schemas"]["MetaplexNFT"];
    };
    SPLNativePrice: {
      value: string;
      decimals: number;
      name: string;
      symbol: string;
    };
    SPLTokenPrice: {
      nativePrice: components["schemas"]["SPLNativePrice"];
      usdPrice: number;
      exchangeAddress: string;
      exchangeName: string;
    };
  };
}

export interface operations {
  /** Gets native balance owned by the given network and address */
  balance: {
    parameters: {
      path: {
        network: "mainnet" | "devnet";
        address: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NativeBalance"];
        };
      };
      400: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Gets token balances owned by the given network and address */
  getSPL: {
    parameters: {
      path: {
        network: "mainnet" | "devnet";
        address: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SPLTokenBalance"][];
        };
      };
      400: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Gets NFTs owned by the given network and address */
  getNFTs: {
    parameters: {
      path: {
        network: "mainnet" | "devnet";
        address: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SPLNFT"][];
        };
      };
      400: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Gets the portfolio of the given network and address */
  getPortfolio: {
    parameters: {
      path: {
        address: string;
        network: "mainnet" | "devnet";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Portfolio"];
        };
      };
      400: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */
  getNFTMetadata: {
    parameters: {
      path: {
        address: string;
        network: "mainnet" | "devnet";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NFTMetadata"];
        };
      };
      400: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Gets the token price (usd and native) for a given contract address and network */
  getTokenPrice: {
    parameters: {
      path: {
        address: string;
        network: "mainnet";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SPLTokenPrice"];
        };
      };
      400: {
        content: {
          "application/json": string;
        };
      };
    };
  };
}

export interface external {}

export default class SolanaApi {
  static initialize: (options: {apiKey?: string, serverUrl?: string, Moralis?: any}) => void;

  static account: {
    balance: (options: operations["balance"]["parameters"]["path"]) => Promise<operations["balance"]["responses"]["200"]["content"]["application/json"]>;
    getSPL: (options: operations["getSPL"]["parameters"]["path"]) => Promise<operations["getSPL"]["responses"]["200"]["content"]["application/json"]>;
    getNFTs: (options: operations["getNFTs"]["parameters"]["path"]) => Promise<operations["getNFTs"]["responses"]["200"]["content"]["application/json"]>;
    getPortfolio: (options: operations["getPortfolio"]["parameters"]["path"]) => Promise<operations["getPortfolio"]["responses"]["200"]["content"]["application/json"]>;
  }

  static nft: {
    getNFTMetadata: (options: operations["getNFTMetadata"]["parameters"]["path"]) => Promise<operations["getNFTMetadata"]["responses"]["200"]["content"]["application/json"]>;
  }

  static token: {
    getTokenPrice: (options: operations["getTokenPrice"]["parameters"]["path"]) => Promise<operations["getTokenPrice"]["responses"]["200"]["content"]["application/json"]>;
  }

}
