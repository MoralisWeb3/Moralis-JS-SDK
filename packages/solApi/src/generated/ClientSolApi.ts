
// CAUTION: This file is automatically generated. Do not edit it manually!
import { getBalanceOperation, GetBalanceRequest, GetBalanceResponseAdapter, getNFTsOperation, GetNFTsRequest, GetNFTsResponseAdapter, getPortfolioOperation, GetPortfolioRequest, GetPortfolioResponseAdapter, getSPLOperation, GetSPLRequest, GetSPLResponseAdapter, getNFTMetadataOperation, GetNFTMetadataRequest, GetNFTMetadataResponseAdapter, GetTokenPriceOperationResponseJSON, GetTokenPriceOperation, GetTokenPriceOperationRequest, GetTokenPriceOperationResponse } from '@moralisweb3/common-sol-utils';
import { OperationResolver, OperationV3Resolver } from '@moralisweb3/api-utils';
import { ApiModule, ResponseAdapter } from '@moralisweb3/common-core';
export abstract class ClientSolApi extends ApiModule {
  
  public readonly account = {
   getBalance: (request: GetBalanceRequest): Promise<GetBalanceResponseAdapter> => {
      return new OperationResolver(getBalanceOperation, this.baseUrl, this.core).fetch(request);
    },
   getNFTs: (request: GetNFTsRequest): Promise<GetNFTsResponseAdapter> => {
      return new OperationResolver(getNFTsOperation, this.baseUrl, this.core).fetch(request);
    },
   getPortfolio: (request: GetPortfolioRequest): Promise<GetPortfolioResponseAdapter> => {
      return new OperationResolver(getPortfolioOperation, this.baseUrl, this.core).fetch(request);
    },
   getSPL: (request: GetSPLRequest): Promise<GetSPLResponseAdapter> => {
      return new OperationResolver(getSPLOperation, this.baseUrl, this.core).fetch(request);
    },

  };

  public readonly nft = {
   getNFTMetadata: (request: GetNFTMetadataRequest): Promise<GetNFTMetadataResponseAdapter> => {
      return new OperationResolver(getNFTMetadataOperation, this.baseUrl, this.core).fetch(request);
    },

  };

  public readonly token = {
   getTokenPrice: (request: GetTokenPriceOperationRequest): Promise<ResponseAdapter<GetTokenPriceOperationResponse, GetTokenPriceOperationResponseJSON>> => {
      return new OperationV3Resolver(GetTokenPriceOperation, this.baseUrl, this.core).fetch(request, null);
    },

  };

}
