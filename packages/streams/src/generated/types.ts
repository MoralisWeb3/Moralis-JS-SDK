/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/logger": {
    get: operations["SetSettings"];
  };
  "/settings": {
    /** Get the settings for the current project based on the project api-key. */
    get: operations["GetSettings"];
    /** Set the settings for the current project based on the project api-key. */
    post: operations["SetSettings"];
  };
  "/streams/evm": {
    /** Get all the evm streams for the current project based on the project api-key. */
    get: operations["GetStreams"];
    /** Creates a new evm stream. */
    put: operations["CreateStream"];
  };
  "/streams/evm/{id}": {
    /** Get a specific evm stream. */
    get: operations["GetStream"];
    /** Updates a specific evm stream. */
    post: operations["UpdateStream"];
    /** Delete a specific evm stream. */
    delete: operations["DeleteStream"];
  };
}

export interface components {
  schemas: {
    /** @enum {string} */
    LogType: "debug" | "info" | "warn" | "error";
    LogModel: {
      date: string;
      block: string;
      message: string;
      type: components["schemas"]["LogType"];
    };
    LogsResponse: {
      result: components["schemas"]["LogModel"][];
      cursor?: string;
    };
    /** @enum {string} */
    SettingsRegion:
      | "us-east-1"
      | "us-west-2"
      | "eu-central-1"
      | "ap-southeast-1";
    SettingsModel: {
      /** @description The region from where all the webhooks will be posted for this project */
      region?: components["schemas"]["SettingsRegion"];
    };
    /**
     * Format: uuid
     * @description Stringified UUIDv4.
     * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
     */
    UUID: string;
    /**
     * @description The stream status:
     * [active] The Stream is healthy and processing blocks
     * [paused] The Stream is paused and is not processing blocks
     * [error] The Stream has encountered an error and is not processing blocks
     * @enum {string}
     */
    StreamsStatus: "active" | "paused" | "error";
    /**
     * @description The abi to parse the log object of the contract
     * @example {}
     */
    StreamsAbi: { [key: string]: unknown };
    /**
     * @description The filter object, optional and only used if the type : log
     * https://v1docs.moralis.io/moralis-dapp/automatic-transaction-sync/smart-contract-events#event-filters
     * @example {}
     */
    StreamsFilter: { [key: string]: unknown };
    /**
     * @description The stream type:
     * [wallet] listen to all native transactions of the address and all logs where the address is involved in at least one of the topics
     * [contract] listens to all native transactions of the address and all logs produced by the contract address
     * @enum {string}
     */
    StreamsType: "wallet" | "contract";
    StreamsModel: {
      /** @description Webhook URL where moralis will send the POST request. */
      webhookUrl: string;
      /** @description A description for this stream */
      description: string;
      /** @description A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present */
      tag: string;
      /** @description The token address of the contract, required if the type : log */
      tokenAddress?: string | null;
      /** @description The topic0 of the event in hex, required if the type : log */
      topic0?: string | null;
      /** @description Include or not native transactions defaults to false (only applied when type:contract) */
      includeNativeTxs?: boolean;
      abi?: components["schemas"]["StreamsAbi"] | null;
      filter?: components["schemas"]["StreamsFilter"] | null;
      /** @description The wallet address of the user, required if the type : tx */
      address?: string | null;
      /** @description The ids of the chains for this stream in hex Ex: ["0x1","0x38"] */
      chainIds: string[];
      /** @description The type of stream to create log or tx */
      type: components["schemas"]["StreamsType"];
      /** @description The unique uuid of the stream */
      id?: components["schemas"]["UUID"];
      /** @description The status of the stream. */
      status?: components["schemas"]["StreamsStatus"];
    };
    StreamsResponse: {
      /** @description Array of project Streams */
      result: components["schemas"]["StreamsModel"][];
      /** @description Cursor for fetching next page */
      cursor?: string;
      /**
       * Format: double
       * @description Total count of streams on the project
       */
      total: number;
    };
    StreamsModelCreate: {
      /** @description Webhook URL where moralis will send the POST request. */
      webhookUrl: string;
      /** @description A description for this stream */
      description: string;
      /** @description A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present */
      tag: string;
      /** @description The token address of the contract, required if the type : log */
      tokenAddress?: string | null;
      /** @description The topic0 of the event in hex, required if the type : log */
      topic0?: string | null;
      /** @description Include or not native transactions defaults to false (only applied when type:contract) */
      includeNativeTxs?: boolean;
      abi?: components["schemas"]["StreamsAbi"] | null;
      filter?: components["schemas"]["StreamsFilter"] | null;
      /** @description The wallet address of the user, required if the type : tx */
      address?: string | null;
      /** @description The ids of the chains for this stream in hex Ex: ["0x1","0x38"] */
      chainIds: string[];
      /** @description The type of stream to create log or tx */
      type: components["schemas"]["StreamsType"];
    };
  };
  responses: {};
  parameters: {};
  requestBodies: {};
  headers: {};
}

export interface operations {
  /** Set the settings for the current project based on the project api-key. */
  SetSettings: {
    parameters: {};
    responses: {
      /** No content */
      204: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SettingsModel"];
      };
    };
  };
  /** Get the settings for the current project based on the project api-key. */
  GetSettings: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["SettingsModel"];
        };
      };
    };
  };
  /** Get all the evm streams for the current project based on the project api-key. */
  GetStreams: {
    parameters: {
      query: {
        /** Limit response results max value 100 */
        limit: number;
        /** Cursor for fetching next page */
        cursor?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["StreamsResponse"];
        };
      };
    };
  };
  /** Creates a new evm stream. */
  CreateStream: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["StreamsModel"];
        };
      };
    };
    /** Provide a Stream Model */
    requestBody: {
      content: {
        "application/json": components["schemas"]["StreamsModelCreate"];
      };
    };
  };
  /** Get a specific evm stream. */
  GetStream: {
    parameters: {
      path: {
        /** The id of the stream to get */
        id: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["StreamsModel"][];
        };
      };
    };
  };
  /** Updates a specific evm stream. */
  UpdateStream: {
    parameters: {
      path: {
        /** The id of the stream to update */
        id: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["StreamsModel"];
        };
      };
    };
    /** Provide a Stream Model */
    requestBody: {
      content: {
        "application/json": components["schemas"]["StreamsModelCreate"];
      };
    };
  };
  /** Delete a specific evm stream. */
  DeleteStream: {
    parameters: {
      path: {
        /** The id of the stream to delete */
        id: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["StreamsModel"];
        };
      };
    };
  };
}

export interface external {}
