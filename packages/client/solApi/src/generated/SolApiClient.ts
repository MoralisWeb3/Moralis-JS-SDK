
// CAUTION: This file is automatically generated. Do not edit it manually!

import { getBalanceOperation, GetBalanceRequest, GetBalanceResponseAdapter, getNFTsOperation, GetNFTsRequest, GetNFTsResponseAdapter, getPortfolioOperation, GetPortfolioRequest, GetPortfolioResponseAdapter, getSPLOperation, GetSPLRequest, GetSPLResponseAdapter, getNFTMetadataOperation, GetNFTMetadataRequest, GetNFTMetadataResponseAdapter, getTokenPriceOperation, GetTokenPriceRequest, GetTokenPriceResponseAdapter } from '@moralisweb3/common-sol-utils';
import { ApiClient } from '@moralisweb3/client-backend-adapter-utils';
import { Module, Core, ModuleType } from '@moralisweb3/common-core';

const backendModuleName = 'sol-api';

export abstract class SolApiClient implements Module {
  protected abstract core: Core;
  protected abstract apiClient: ApiClient;
  public abstract name: string;
  public readonly type = ModuleType.API;

  
  public readonly account = {
   getBalance: (request: GetBalanceRequest): Promise<GetBalanceResponseAdapter> => {
      return this.apiClient.request(backendModuleName, request, getBalanceOperation);
    },
   getNFTs: (request: GetNFTsRequest): Promise<GetNFTsResponseAdapter> => {
      return this.apiClient.request(backendModuleName, request, getNFTsOperation);
    },
   getPortfolio: (request: GetPortfolioRequest): Promise<GetPortfolioResponseAdapter> => {
      return this.apiClient.request(backendModuleName, request, getPortfolioOperation);
    },
   getSPL: (request: GetSPLRequest): Promise<GetSPLResponseAdapter> => {
      return this.apiClient.request(backendModuleName, request, getSPLOperation);
    },

  };

  public readonly nft = {
   getNFTMetadata: (request: GetNFTMetadataRequest): Promise<GetNFTMetadataResponseAdapter> => {
      return this.apiClient.request(backendModuleName, request, getNFTMetadataOperation);
    },

  };

  public readonly token = {
   getTokenPrice: (request: GetTokenPriceRequest): Promise<GetTokenPriceResponseAdapter> => {
      return this.apiClient.request(backendModuleName, request, getTokenPriceOperation);
    },

  };

}
