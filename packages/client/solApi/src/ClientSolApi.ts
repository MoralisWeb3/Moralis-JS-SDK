
// CAUTION: This file is automatically generated. Do not edit it manually!

import { getBalanceOperation, GetBalanceRequest, GetBalanceResponse, GetBalanceJSONResponse, getNFTsOperation, GetNFTsRequest, GetNFTsResponse, GetNFTsJSONResponse, getPortfolioOperation, GetPortfolioRequest, GetPortfolioResponse, GetPortfolioJSONResponse, getSPLOperation, GetSPLRequest, GetSPLResponse, GetSPLJSONResponse, getNFTMetadataOperation, GetNFTMetadataRequest, GetNFTMetadataResponse, GetNFTMetadataJSONResponse, getTokenPriceOperation, GetTokenPriceRequest, GetTokenPriceResponse, GetTokenPriceJSONResponse } from '@moralisweb3/common-sol-utils';
import { ClientRequestHandler } from '@moralisweb3/client-api-utils';
import { ResponseAdapter } from '@moralisweb3/common-core';

export class ClientSolApi {
  public constructor(
    private readonly requestHandler: ClientRequestHandler) {
  }
  
  public readonly account = {
   getBalance: (request: GetBalanceRequest): Promise<ResponseAdapter<GetBalanceResponse, GetBalanceJSONResponse>> => {
      return this.requestHandler.handle(request, getBalanceOperation);
    },
   getNFTs: (request: GetNFTsRequest): Promise<ResponseAdapter<GetNFTsResponse, GetNFTsJSONResponse>> => {
      return this.requestHandler.handle(request, getNFTsOperation);
    },
   getPortfolio: (request: GetPortfolioRequest): Promise<ResponseAdapter<GetPortfolioResponse, GetPortfolioJSONResponse>> => {
      return this.requestHandler.handle(request, getPortfolioOperation);
    },
   getSPL: (request: GetSPLRequest): Promise<ResponseAdapter<GetSPLResponse, GetSPLJSONResponse>> => {
      return this.requestHandler.handle(request, getSPLOperation);
    },

  };

  public readonly nft = {
   getNFTMetadata: (request: GetNFTMetadataRequest): Promise<ResponseAdapter<GetNFTMetadataResponse, GetNFTMetadataJSONResponse>> => {
      return this.requestHandler.handle(request, getNFTMetadataOperation);
    },

  };

  public readonly token = {
   getTokenPrice: (request: GetTokenPriceRequest): Promise<ResponseAdapter<GetTokenPriceResponse, GetTokenPriceJSONResponse>> => {
      return this.requestHandler.handle(request, getTokenPriceOperation);
    },

  };

}
