import { IDefaultCallbacks } from '../../types';
import { MoralisError } from '@moralisweb3/core';
import { useResolver } from '../../useResolver';
import { useState, useCallback } from 'react';

export const {{ name }} = () => {
  const resolver = useResolver();
  const [isLoading, setIsLoading] = useState(false);
  const [data, setData] = useState<string | null>(null);
  const [error, setError] = useState<MoralisError | null>(null);

  const action = useCallback(({ onComplete, onError, onSuccess, throwOnError = false }: IDefaultCallbacks<string> = {}) => {
    return resolver(
      () => {
        setIsLoading(true);
        // return Evm.connect(connector, rest);
      },
      {
        _onComplete: () => setIsLoading(false),
        _onError: setError,
        _onSuccess: setData,
        onComplete,
        onError,
        onSuccess,
        throwOnError,
      },
    );
  }, []);

  return { action, isLoading, data, error };
};
